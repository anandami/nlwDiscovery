<!-- 
Episódio 1 - Acelerando sua evolução 
Live
Dicas: saber de tudo um pouco e se especializar em uma coisa
Treinar muito ainda que copiando código

Workshop
[obs. codigo em separado - duplicado - projeto happy original e "happy personalizado" - cadastro de profissionais liberais da cidade]
Programar é ensinar o computador utilizando processos - algoritmos, lógica de programação e sintaxe. 
Algoritmo é a sequencia de ações. 
A forma de montar o passo a passo é a lógica de programação - a maneira correta de pensar.
Sintaxe - a maneira correta de escrever a instrução.
O front-end chama e o back-end executa e responde. 
A comunicação web é feita através do protocolo HTTP - é um protocolo de transferencia de hipertexto. Hypertext Transfer Protocol. 
HTML - Hypertext Markup Language - hipertexto é o link que podem levar a textos, imagens, outros locais na web, etc.; marcação é a tag; linguagem é a sintaxe - não é uma linguagem de programação, mas sim de escrita.
URL - Universal Resourse Locator - responsavel por buscar um conteudo na web e trazer a copia dessa página do servidor para a minha máquina. 
As tags precisam ter abertura e fechamento e são predeterminadas. 
DOCTYPE - utilizado anteriormente para especificar o tipo de html.
Tags dentro de outras possuem o nome de aninhamento de tags. 
Tag head - responsável por configurar o documento 
Tag body - corpo do html - onde tudo será exibido. 
Meta tags - tags com conteudo somente dentro dela com fechamento automático - responsavel por metadados da página - configurações do html. Ex. charset - conjunto de caracteres.
obs. atalho alt + z regula a quebra de linha 
VIEWPORT - adapta a tela ao dispositivo
Title - título da página
href - é o caminho de uma referencia. 
a tag link pode ser utilizada tanto para adicionar uma folha de estilo quando um icone, utilizando rel="icon".
Header - configuração do cabeçalho. 
o header pode receber uma imagem <img src="caminho" alt="descrição da imagem para SEO">, por exemplo uma logomarca
o atributo alt é uma "alternativa à imagem", que será lida por exemplo por leitores de acessibilidade. 
div é uma caixa genérica diferente do header que tem uma razão específica de existir. 

Algumas tags ocupam por padrão todo o espaço da linha da tela. Isso é chamadado de tag de tipo display block.
Isso faz com que o proximo elemento seja necessariamente enviado para baixo. Já a tag strong é do tipo inline, o que faz com que seja permitido mais elementos no mesmo alinhamento horizontal. 

O browser possui suas proprias regras css que são padrão. 

Tipografia - h1 até h6 - a depender da importancia do texto no contexto

O atributo title pode ser utilizado em qualquer tag para colocar uma "explicação". 

CSS - Cascading Style Sheets
É o estilo para o html.
Sintaxe:
seletor {
    propriedade: valor;
}
ex.
body {
    color: black;
}

A sintaxe acima é uma regra css chamada de declaração. 

Grau de importancia da regra:
1. !important
2. Tag Style como atributo do html. Ex. <body style="color: yellow;"
3. css com #id 
4. última regra adicionada ao css - efeito cascata 
5. Style no html - fora do atributo, dentro do body

Quando no html é utilizao um id, ele é localizado pelo css utilizando a #. Ex. id="body" e #body. Ids não devem ser repetidos.
As classes são criadas com class="classe" e são referenciadas em css utilizando .classe.

Recomenda-se programar tendo por base o ajuste responsivo mobile firts e depois criar como exceção a versão desktop.

Propriedades CSS podem ser utilizadas como shorthands, ou seja, todas as características (valores) em uma mesma propriedade. Por exemplo, background, ao invés de background-color. 

Transição de cores: linear gradient - valor numero que representa o grau de inclinação, cor de início com hexadecimais seguida da transparencia; cor de final com a transparencia.

user agent - responsável por adicionar as regras css pelo navegador.

padding - preenchimento 
margin - espaçamento 

box model - modelo de caixa - conteudo(width e height), borda(limites), espaçamento(entorno da caixa), etc. 

altura mínima - min-height - em viewport height - ex. 100vh. 

font-weight - de light a bold.
Ao inés de colocar o css: 
body, input, button, text area{ 
    font-weight: 400;
    font-size: 18px;
    line-height: 1;
    font-family: 'Nunito', sans-serif;

}

pode ser utilizada a shorthand:

body, input, button, textarea{
    font: 400 18px/1 'Nunito', sans-serif;
}

rem e em - substitui o pixel, tornando um reflexo e não algo fixo. O EM busca no elemento acima e faz uma proporção. O REM é a busca no root element, que no caso será sempre o html. 
obs. elementos irmão estão dentro da mesma tag, por exemplo, header e main estarem dentro de body. 
O padrão do navegador para fontes é 16px. Então também é possível definir valores fixos utilizando porcentagem. 
Ex. font-size: 62,5%; // 16px

O display pode ser block ou inline. Display block é quando ocupa a linha toda e inline é quando mais de uma pode ocupar a mesma linha.
Dentro da caixa a exibição pode ser flex, onde ele se adapta ao posicionamento, deixando os elementos internos (filhos) um ao lado do outro.  
A propriedade margin auto só consegue alinhar se o elemento anterior for display flex. 

Para centralizar um elemento perfeitamnte deverá utilizar justify content center e align-itens center. Esses elementos somente irão funcionar aliados ao display flex.

A shorthand de margin segue o sentido horário - top, right, bottom e left. Se adicionar dois elementos será [acima, abaixo] e [direita, esquerda]. Se forem três valores, será top, [esquerda e direita], baixo. 


ANIMAÇÕES EM CSS

- AT RULES - @
@keyframes nome{
    from{
        [transformação de início]
    }
    to{
        [onde chegar]
    }
}

translateY - efeitos de cima para baixo e vice versa.

hover - comportamento desejado para quando o mouse está sobre o meu elemento.

@media() - utilizada para estabelecer um tamanho de tela específico para determinado conjunto de regras de css. 
ex. 
@media(min-width: 760px){
    quando o layout for de pelo menos 760 pixels, começa a aplicar as regras css dessas chaves
}

clamp - mínimo, valor desejado, valor máximo. 

Se precisar refazer o comportamento padrão de medida baseado em rem para manter o valor fixo, utilizo o box sizing:
box-sizing - border box
Quando o elemento for adaptado ao novo tamanho ele provavelmente tentará mudar de posição, para escolher qual posição isso fica, utilizo:
flex-direction: column;
justify-content: space-between;



JAVASCRIPT
o objeto document é a tela toda. 
Todo objeto tem propriedades e valores e o navegador não é diferente. 
ex. camiseta = {color: "verde"}

no navegador é possível alterar características:

document.body.style.backgroudColor = "blue"

a tela ficará azul

função:
camiseta.verificarLimpeza = function(){
    if (camiseta.suja){
        return "camiseta suja";
    } else{
        return "camiseta limpa";
    }
}

camiseta.suja = true;
camiseta.suja = false;

biblioteca leaflet.js - mapas interativos
só seguir o passo a passo. 

é possível adicionar multiplas propriedades e métodos em um objeto sequenciamente.
ex. 
L.marker([51.5,-0.09]).addTo(map).bindPopUp('A pretty CSS3 popup.<br> Easily customizable').openPopUp();

Neste caso, na mesma instrução eu informei uma localizaão ao código, adicionei ao mapa, ligo o popUp e abro o popUp. 

Para esta biblioteca, será utilizada as propriedades do zoom nas coordenadas de setView.


Exemplo de inserção de imagens com javascript
const icon = L.icon({
    iconUrl: "./pasta/nomeDaImagem.svg",
    iconSize: [58,68],
    iconAnchor: [29,68],
})

esse tipo de função da documentação espera um objeto com a imagem, por isso é possível sua inserção via javascript. 

No javascript também é possível inserir um html. 
Se forem necessárias aspas duplas dentro de outras aspas, as externas precisam ser simples. 
'Exemplo de html dentro do javascript <a href="exemplo" class="exemploDeClasse"'

box-shadow: deslocamento horizontal deslocamento vertical blur cor;

z-index é a posição do eixo z, de terceira dimensão. A profundidade por padrão é 0.

Hexadecimal - os dois primeiros pares são R, após, G, então B - indo de 0 a F. 

BACKEND 
obs. todo objeto é formado por chave e valor; se a chave//propriedade e o valor forem do mesmo nome, posso deixar só um.
ex. {name} == {name:name}
É responsável por verificar as regras de negócio. 
A aplicação funciona, portanto, no modelo de requisição e resposta, que é dada pelo servidor. 

Adiciona a extensão material icon theme 
Adiciona node e git bash ao windows e ao terminal do vs code.
Os comandos que forem digitados como scripts a partir de então podem rodar no terminal do vs code com o comando
node server.js 
por exemplo. 
curiosidade -- cd é change directory
Para rodar a aplicação completa via terminal foi necessária a instalaçao de alguns modulos:
npm - node package manager
para iniciar um projeto ==> npm init -y
para mostrar o caminho completo de diretórios - pwd

para criar um servidor, será utilizado npm install express
instalará os node modules e um package-lock
instalar também o nodemon 
abrir o arquivo package.json, ir em debug e alterar o parametro test para start e seu conteudo para
"nodemon src/server.js"

Para cada arquivo deveria ser feita uma nova rota, o que tornaria inviável o trabalho do desenvolvedor.
Para facilitar são utilziados arquivos estáticos. 
Arquivos estáticos são arquivos que não são mudados em tempo de execução. Ex. arquivos css e html que foram criados até a terceira aula.
Se não for trabalhar com react, é interessante trabalhar com templates. 
Para isso, instalar o handlebars - npm install hbs
após, deve ser configurada a template engine, conforme verificado no server.js
após, trocar todos os arquivos html para hbs
Com o uso desse template, é possível interpolar valores que foram inseridos no server - request e response diretamente no html utilizando {{}}
Ex.
.get('/', (request,response)=>{
    const = city = request.query.city
    return response.render('index', {city})
})

no antigo arquivo html que agora é hbs, onde estava o campo que eu quero alterar eu passo a variável:
{{city}}

agora já posso deixar a página dinâmica passando a cidade que eu desejo que seja exibida como parametra da URL
?city="Rio do Sul"
para rodar a aplicação utilizando nodemon 
npm start 
em package.json, em start já está o restante do caminho que a aplicação deverá manter o reload contínuo. 

Em razão do handlebars, posso mencionar objetos que forem exportados como módulos no html
{{nome do objeto}}
<p>{{this.id}}</p>
a estrutura acima é uma estrutura de repetição que irá percorrer o objeto mencionado, exibindo todos os id que eu tiver
Um exemplo do uso desta estrutrura estará em orphanages.hbs

Banco de Dados
Foi utilizado SQL com SQLite
O banco de dados irá residir na propria aplicação. 
$ npm install sqlite-async
com o uso de template literals ou template strings é possível fazer quebras de linha e passar variáveis
Para que seja criado um comando para se comunicar com o banco de dados de forma generica, é recomendado utilizar template literals 
O sqlite-async não funcionou com o node 14v, só com a 12!


Episódio 2 - Olhando as oportunidades 
Live
Dicas: 
Se aplicar a vagas mesmo que nao seja 100% match. 
Cuidado com a sindrome do impostor. 
Reprograma - acompanhar os bootcamps
Network é importante mas o melhor é ser uma boa pessoa no mercado de trabalho.
Soft skills é importante - "hard skills contratam, soft skills demitem"

-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NLW - ANOTAÇÕES</title>
  </head>
  <body>
    <header></header>
    <main></main>
  </body>
</html>
